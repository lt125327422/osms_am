package com.amazon.client;

import com.amazonaws.mws.MarketplaceWebServiceClient;
import com.amazonaws.mws.MarketplaceWebServiceConfig;
import com.amazonaws.mws.MarketplaceWebServiceException;
import com.amazonaws.mws.model.*;
import com.itecheasy.common.util.DateUtils;
import com.itecheasy.common.util.DeployProperties;
import com.itecheasy.core.amazon.AmazonConfigInfo;
import com.itecheasy.core.amazon.getReportResult.GetReportListResultVO;
import com.itecheasy.core.amazon.getReportvo.GetReportListVO;
import com.itecheasy.core.amazon.getReportResult.GetReportRequestListResultVO;
import com.itecheasy.core.amazon.getReportResult.RequestReportResultVO;
import com.itecheasy.core.amazon.getReportvo.GetReportRequestListVO;
import com.itecheasy.core.amazon.getReportvo.RequestReportVO;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.io.InputStream;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;

/**
 * @Auther: liteng
 * @Date: 2018/6/30 09:26
 * @Description:
 */
public class AmazonReportClient {

    private static final Logger LOGGER = Logger.getLogger(AmazonReportClient.class);

    private static MarketplaceWebServiceClient client = null;

    /**
     *
     * 初始化
     *
     * @param api
     */
    public static void init(AmazonConfigInfo api) {
        MarketplaceWebServiceConfig config = new MarketplaceWebServiceConfig();
        config.setServiceURL(api.getServiceURL());
        client = new MarketplaceWebServiceClient(api.getAccessKeyId(), api.getSecretAccessKey(),
                DeployProperties.getInstance().getAppName(),DeployProperties.getInstance().getAppVersion(),config);

    }

    /**
     * step 1
     * @param requestReportVO
     * @return
     */
    public static RequestReportResultVO requestReport(RequestReportVO requestReportVO){


        RequestReportRequest request = new RequestReportRequest();
        request.setReportType(requestReportVO.getReportType());
        request.setStartDate(DateUtils.getXMLGregorianCalendar(requestReportVO.getStartDate()));

        IdList ids = new IdList();
        //封装request
        request.setMarketplaceIdList(ids);

        try {
            RequestReportResultVO resultVO = new RequestReportResultVO();

            RequestReportResponse response = client.requestReport(request);
            ReportRequestInfo info = response.getRequestReportResult().getReportRequestInfo();




            resultVO.setReportRequestId(info.getReportRequestId());
            resultVO.setEndDate(DateUtils.getDateByXMLGregorianCalendar(info.getEndDate()));
            //封装result

            return resultVO;

        } catch (MarketplaceWebServiceException e) {
            e.printStackTrace();
        }

        return null;

    }

    /**
     *
     *  step 2
     *
     * @param getReportRequestListVO
     * @return
     */
    public static GetReportRequestListResultVO getReportRequestList(GetReportRequestListVO getReportRequestListVO) {

        GetReportRequestListRequest request = new GetReportRequestListRequest();
        IdList ids = new IdList();
        ids.setId(getReportRequestListVO.getIds());


        request.setReportRequestIdList(ids);


        try {

            GetReportRequestListResponse reportRequestList = client.getReportRequestList(request);
            List<ReportRequestInfo> infoList = reportRequestList.getGetReportRequestListResult().getReportRequestInfoList();
            for (ReportRequestInfo info : infoList) {
                //对象封装回result
//                info.get


            }

        } catch (MarketplaceWebServiceException e) {
            e.printStackTrace();
        }

        return null;

    }


    /**
     *
     * step 3 如果没有GeneratedReportId   才调用这个方法
     *
     * @param api
     */
    public static GetReportListResultVO getReportList(GetReportListVO vo) {

        GetReportListRequest request = new GetReportListRequest();

        IdList list = new IdList();
        list.setId(vo.getReportRequestIdList());
        request.setReportRequestIdList(list);

        try {
            GetReportListResponse reportList = client.getReportList(request);
            List<ReportInfo> reportInfoList = reportList.getGetReportListResult().getReportInfoList();
            for (ReportInfo info : reportInfoList) {
                info.getReportRequestId();
            }



        } catch (MarketplaceWebServiceException e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     *
     * step 2.1
     *
     * @param
     * @param nextToken
     */
    public static GetReportRequestListResultVO getReportRequestListByNextToken(String nextToken) {

        GetReportRequestListByNextTokenRequest request = new GetReportRequestListByNextTokenRequest();
        GetReportRequestListByNextTokenResponse response = null;
        try {
            response = client.getReportRequestListByNextToken(request);

            List<ReportRequestInfo> reportRequestInfoList = response.getGetReportRequestListByNextTokenResult().getReportRequestInfoList();
            String resultNextToken = response.getGetReportRequestListByNextTokenResult().getNextToken();
            

            for (ReportRequestInfo info : reportRequestInfoList) {

            }

        } catch (MarketplaceWebServiceException e) {
            e.printStackTrace();
        }

        return null;
    }

    /**
     *
     *step 3.1
     *
     * @param api
     * @param nextToken
     */
    public static GetReportListResultVO getReportListByNextToken(String nextToken) throws MarketplaceWebServiceException {

        GetReportListByNextTokenRequest request = new GetReportListByNextTokenRequest();

            GetReportListByNextTokenResponse response = client.getReportListByNextToken(request);
            List<ReportInfo> infoList = response.getGetReportListByNextTokenResult().getReportInfoList();
            String resultNextToken = response.getGetReportListByNextTokenResult().getNextToken();
            for (ReportInfo info : infoList) {



            }
return null;

    }


    /**
     *
     * step 4 the end
     *返回一个字符串
     * @return
     * @throws MarketplaceWebServiceException
     */

    public static String getReport(String reportId) throws MarketplaceWebServiceException {

        GetReportRequest request = new GetReportRequest();
        request.setReportId(reportId);

        GetReportResponse response = client.getReport(request);

        //md5
        String md5Checksum = response.getGetReportResult().getMD5Checksum();

        return null;

    }

    /**
     *
     * md5效验    工具
     * Consume the stream and return its Base-64 encoded MD5 checksum.
     */
    public static String computeContentMD5Header(InputStream inputStream) {
        // Consume the stream to compute the MD5 as a side effect.
        DigestInputStream s;
        try {
            s = new DigestInputStream(inputStream,
                    MessageDigest.getInstance("MD5"));
            // drain the buffer, as the digest is computed as a side-effect
            byte[] buffer = new byte[8192];
            while(s.read(buffer) > 0);
            return new String(
                    org.apache.commons.codec.binary.Base64.encodeBase64(
                            s.getMessageDigest().digest()),
                    "UTF-8");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}