package com.itecheasy.core.amazon;

import com.amazon.client.AmazonReportClient;
import com.amazonaws.mws.MarketplaceWebServiceException;
import com.itecheasy.core.amazon.getReportResult.AmazonManagerStockResultVO;
import com.itecheasy.core.amazon.getReportResult.GetReportListResultVO;
import com.itecheasy.core.amazon.getReportvo.GetReportListVO;
import com.itecheasy.core.amazon.getReportResult.GetReportRequestListResultVO;
import com.itecheasy.core.amazon.getReportResult.RequestReportResultVO;
import com.itecheasy.core.amazon.getReportvo.GetReportRequestListVO;
import com.itecheasy.core.amazon.getReportvo.RequestReportVO;

import java.util.*;

/**
 * @Auther: liteng
 * @Date: 2018/7/2 11:17
 * @Description:
 */
public class AmazonReportWebServiceImpl implements AmazonReportWebService {


    @Override
    public AmazonManagerStockResultVO getReport(RequestReportVO step1VO) throws MarketplaceWebServiceException {

        //step first   返回一个ReportRequestId
        RequestReportResultVO step1Result = AmazonReportClient.requestReport(step1VO);

        List<String> ids = new ArrayList<String>();
        ids.add(step1Result.getReportRequestId());  //一个枚举对应一个id

        //step 2
        GetReportRequestListVO step2VO = new GetReportRequestListVO();
        step2VO.setIds(ids);
        List<GetReportRequestListResultVO> allStep2Result = new ArrayList<GetReportRequestListResultVO>();
        GetReportRequestListResultVO reportRequestList = AmazonReportClient.getReportRequestList(step2VO);
        allStep2Result.add(reportRequestList);   //收集

        //step 2.1   考虑到返回nextToken的情况
        boolean hasNext1 = reportRequestList.isHasNext();
        String token1 =reportRequestList.getNextToken();
        while (hasNext1){
            GetReportRequestListResultVO step2_1Result = AmazonReportClient.getReportRequestListByNextToken(token1);
            token1 = step2_1Result.getNextToken();
            hasNext1 = step2_1Result.isHasNext();
            allStep2Result.add(step2_1Result); //收集step3next
        }

        //判断，出现分支
        List<String> GeneratedReportIdList = new ArrayList<String>();
        List<GetReportRequestListResultVO> step3List = new ArrayList<GetReportRequestListResultVO>();
        for (GetReportRequestListResultVO all : allStep2Result) {           //把all进行branch判断
            if (all.getGeneratedReportId()!=null){
                GeneratedReportIdList.add(all.getGeneratedReportId());
            }else{
                step3List.add(all);
            }
        }

        //step 3   调用这个api是因为有些订单没有GeneratedReportId
        List<String> step3Param = new ArrayList<String>();
        for (GetReportRequestListResultVO step3 : step3List) {
            step3Param.add(step3.getReportRequestId());
        }
        GetReportListVO vo = new GetReportListVO();  //封装给step3调用
        vo.setReportRequestIdList(step3Param);

        List<String> allstep3_result = new ArrayList<String>();
        GetReportListResultVO step3Result = AmazonReportClient.getReportList(vo);//调用amazon
        allstep3_result.add(step3Result.getReportId()); //收集step3next

        //step 3.1   考虑到返回nextToken的情况
        boolean hasNext = step3Result.isHasNext();
        String token =step3Result.getNextToken();
        while (hasNext){
            GetReportListResultVO step3_1Result = AmazonReportClient.getReportListByNextToken(token);
            token = step3_1Result.getNextToken();
            hasNext = step3_1Result.isHasNext();
            allstep3_result.add(step3_1Result.getReportId()); //收集step3next
        }

        //把1的GeneratedReportId 和 reportId合并在一起
        for (GetReportRequestListResultVO step2result : allStep2Result) {
            allstep3_result.add(step2result.getGeneratedReportId());
        }

        //生成报告
        //step 2 和2.1的GeneratedReportId当为参数，或者step 3中生成的ReportId作为参数   最后要多次调用report
        //step 4   如果有GeneratedReportId就可以直接生成报告了
        List<String> lastReportList = new ArrayList<String>();
        for (String lastParam : allstep3_result) {
            lastReportList.add(AmazonReportClient.getReport(lastParam));
            //md5校验，如果一直失败就发邮件

        }





        //解析报告
//        List<Map<String,Object>> whatColumn = new ArrayList<Map<String, Object>>();
//        Map<String,Object> rowMap = new HashMap<String, Object>();
//        Map<String,List<Object>> allRow = new HashMap<String, List<Object>>();



        String[] splitRows = null;
        for (String s3 : allstep3_result) {
            String report = AmazonReportClient.getReport(s3);//得到的是解析后的结果
            splitRows = report.split("\r\n");  //根据换行符来分割，得到每行的数据
        }


        if (splitRows!=null) {

                for (int i = 0; i < splitRows.length; i++) { //从第二行开始解析，第二行开始才是数据
                    if (i==0){  //第一行
                        String[] splitSingle = splitRows[i].split("\t"); //取得每一行的每一个
                        List<String> firstRowList = Arrays.asList(splitSingle);
                    }else{
                        String[] splitSingle = splitRows[i].split("\t"); //取得每一行的每一个

                    }
                    //剩下的行的数据
                    //把这一行的全部放入到List中
                }
                    //没有报告或者报告是只有表头，这样的报告没有意义


        }


        return null;
    }



}
