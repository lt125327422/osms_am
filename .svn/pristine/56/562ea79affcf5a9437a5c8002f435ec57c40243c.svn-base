package com.amazon.client;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.*;
import org.apache.log4j.Logger;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.FBAInboundServiceMWSClient;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.FBAInboundServiceMWSConfig;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.mock.FBAInboundServiceMWSMock;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.Address;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.CreateInboundShipmentPlanRequest;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.CreateInboundShipmentPlanResponse;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.CreateInboundShipmentPlanResult;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.CreateInboundShipmentRequest;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.CreateInboundShipmentResponse;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.CreateInboundShipmentResult;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentHeader;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentItem;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentItemList;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentPlan;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentPlanItem;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentPlanItemList;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentPlanList;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentPlanRequestItem;
import com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model.InboundShipmentPlanRequestItemList;
import com.itecheasy.common.util.BeanUtils;
import com.itecheasy.common.util.DeployProperties;
import com.itecheasy.core.amazon.AmazonConfigInfo;
import com.itecheasy.core.amazon.vo.AddressVO;
import com.itecheasy.core.amazon.vo.InboundItemVO;
import com.itecheasy.core.amazon.vo.InboundShipmentVO;

/**
 * @author taozihao
 * @date 2018-6-6
 * @description 亚马逊补货计划以及创建补货单
 * @version
 */
public class AmazonInboundClient {
	private static final Logger LOGGER = Logger.getLogger(AmazonInboundClient.class);

	private static FBAInboundServiceMWSClient client = null;

	public static void init(AmazonConfigInfo api) {
		FBAInboundServiceMWSConfig config = new FBAInboundServiceMWSConfig();
		config.setServiceURL(api.getServiceURL());
		client = new FBAInboundServiceMWSClient(api.getAccessKeyId(), api.getSecretAccessKey(),
				DeployProperties.getInstance().getAppName(), DeployProperties.getInstance().getAppVersion(), config);
	}
	
	/**
	 * 创建fba补货计划
	 * @param api
	 * @param itemList
	 * @param shipFromAddress
	 * @param shipToCountryCode
	 * @return
	 */
	public static InboundShipmentPlanList createInboundShipmentPlan(AmazonConfigInfo api,List<InboundItemVO> itemList ,AddressVO shipFromAddress,String shipToCountryCode){
		//掉方法之前事先初始化client
		//init(api);
		LOGGER.info("创建补货计划-发往国家:" +shipToCountryCode+" 店铺webservice地址："+api.getServiceURL());
		CreateInboundShipmentPlanRequest request = new CreateInboundShipmentPlanRequest();
		
		InboundShipmentPlanRequestItemList list = new InboundShipmentPlanRequestItemList();
		list.setMember(BeanUtils.copyList(itemList, InboundShipmentPlanRequestItem.class));
		
		request.setInboundShipmentPlanRequestItems(list);
		request.setMarketplace(api.getMarketplaceID());
		//request.setMWSAuthToken(api.getAPISellerUserToken());
		request.setSellerId(api.getSellerID());
		request.setShipFromAddress(BeanUtils.copyProperties(shipFromAddress, Address.class));
		request.setShipToCountryCode(shipToCountryCode);

		ObjectMapper mapper = new ObjectMapper();
		try {
			String data = mapper.writeValueAsString(request);
			LOGGER.info("创建补货计划-准备提交给亚马逊的数据："+data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		//此处默认"SELLER_LABEL"
		request.setLabelPrepPreference("SELLER_LABEL");
		//try
		//CreateInboundShipmentPlanResponse response = client.createInboundShipmentPlan(request);
		//return response.getCreateInboundShipmentPlanResult().getInboundShipmentPlans();
		
		FBAInboundServiceMWSMock mwsMock = new FBAInboundServiceMWSMock();
		CreateInboundShipmentPlanResponse response = mwsMock.createInboundShipmentPlan(request);
		
		try {
			String data = mapper.writeValueAsString(response.getCreateInboundShipmentPlanResult());
			LOGGER.info("创建补货计划-亚马逊返回的数据："+data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		//模拟响应数据
		return response.getCreateInboundShipmentPlanResult().getInboundShipmentPlans();
	}

    /**
     *
     *
     * @param api
     * @param inboundShipmentVO
     * @return
     */
	public static CreateInboundShipmentResult createInboundShipment(AmazonConfigInfo api ,InboundShipmentVO inboundShipmentVO){
		//掉方法之前事先初始化client
		//init(api);
		LOGGER.info("创建补货订单-店铺webservice地址："+api.getServiceURL());

		CreateInboundShipmentRequest request = new CreateInboundShipmentRequest();
		request.setMarketplace(api.getMarketplaceID());
		//request.setMWSAuthToken(api.getAPISellerUserToken());
		request.setSellerId(api.getSellerID());
		request.setShipmentId(inboundShipmentVO.getShipmentId());

		//设置头信息
		InboundShipmentHeader header = new InboundShipmentHeader();
		header.setDestinationFulfillmentCenterId(inboundShipmentVO.getDestinationFulfillmentCenterId());
		header.setLabelPrepPreference(inboundShipmentVO.getLabelPrepType());
		header.setShipFromAddress(BeanUtils.copyProperties(inboundShipmentVO.getShipFromAddress(),Address.class));
		header.setShipmentName(inboundShipmentVO.getShipmentName());
		header.setShipmentStatus(inboundShipmentVO.getShipmentStatus());
		
		request.setInboundShipmentHeader(header);
		//创建商品项
		InboundShipmentItemList itemList = new InboundShipmentItemList();
		
		List<InboundShipmentItem> members = new ArrayList<InboundShipmentItem>();
		List<InboundItemVO> items = inboundShipmentVO.getItems();
		for (InboundItemVO inboundItemVO : items) {
			InboundShipmentItem item = new InboundShipmentItem();
			item.setSellerSKU(inboundItemVO.getSellerSKU());
			item.setQuantityShipped(inboundItemVO.getQuantity());
			members.add(item);
		}
		
		
		itemList.setMember(members);
		request.setInboundShipmentItems(itemList);

		ObjectMapper mapper = new ObjectMapper();
		try {
			String string = mapper.writeValueAsString(request);
			LOGGER.info("创建补货订单-准备提交给亚马逊："+string);
		} catch (Exception e) {
			e.printStackTrace();
		}
		//调用亚马逊接口
		//CreateInboundShipmentResponse response = client.createInboundShipment(request);
		//CreateInboundShipmentResult result = response.getCreateInboundShipmentResult();
		
		//模拟调用
		//FBAInboundServiceMWSMock mwsMock = new FBAInboundServiceMWSMock();
		//CreateInboundShipmentResponse response = mwsMock.createInboundShipment(request);
		
		CreateInboundShipmentResponse response = new CreateInboundShipmentResponse();
		CreateInboundShipmentResult shipmentResult = new CreateInboundShipmentResult();
		shipmentResult.setShipmentId(request.getShipmentId());
		response.setCreateInboundShipmentResult(shipmentResult);
		CreateInboundShipmentResult result = response.getCreateInboundShipmentResult();
		try {
			String data = mapper.writeValueAsString(response.getCreateInboundShipmentResult());
			LOGGER.info("创建补货订单-亚马逊返回："+data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}





	//update fba re
	public static UpdateInboundShipmentResult updateInboundShipment(AmazonConfigInfo api ,InboundShipmentVO inboundShipmentVO){
        //掉方法之前事先初始化client
		//init(api);
		LOGGER.info("修改补货订单-店铺webservice地址："+api.getServiceURL());

		UpdateInboundShipmentRequest request = new UpdateInboundShipmentRequest();

		request.setMarketplace(api.getMarketplaceID());
		//request.setMWSAuthToken(api.getAPISellerUserToken());
		request.setSellerId(api.getSellerID());
		request.setShipmentId(inboundShipmentVO.getShipmentId());


		//设置头信息
		InboundShipmentHeader header = new InboundShipmentHeader();
		header.setDestinationFulfillmentCenterId(inboundShipmentVO.getDestinationFulfillmentCenterId());
		header.setLabelPrepPreference(inboundShipmentVO.getLabelPrepType());
		header.setShipmentName(inboundShipmentVO.getShipmentName());
		header.setShipmentStatus(inboundShipmentVO.getShipmentStatus());
		//退货地址
        header.setShipFromAddress(BeanUtils.copyProperties(inboundShipmentVO.getShipFromAddress(),Address.class));

		request.setInboundShipmentHeader(header);
		//创建商品项
		InboundShipmentItemList itemList = new InboundShipmentItemList();
		List<InboundShipmentItem> members = new ArrayList<InboundShipmentItem>();
		List<InboundItemVO> items = inboundShipmentVO.getItems();
		for (InboundItemVO inboundItemVO : items) {
			InboundShipmentItem item = new InboundShipmentItem();
			item.setSellerSKU(inboundItemVO.getSellerSKU());
			item.setQuantityShipped(inboundItemVO.getQuantity());
			members.add(item);
		}

		itemList.setMember(members);
		request.setInboundShipmentItems(itemList);

		ObjectMapper mapper = new ObjectMapper();
		try {
			String string = mapper.writeValueAsString(request);
			LOGGER.info("修改补货订单-准备提交给亚马逊："+string);
		} catch (Exception e) {
			e.printStackTrace();
		}

		//调用亚马逊接口
//        UpdateInboundShipmentResponse response = client.updateInboundShipment(request);
//        UpdateInboundShipmentResult result = response.getUpdateInboundShipmentResult();
		//模拟调用
		FBAInboundServiceMWSMock mwsMock = new FBAInboundServiceMWSMock();
//		CreateInboundShipmentResponse response = mwsMock.createInboundShipment(request);
		UpdateInboundShipmentResponse response = mwsMock.updateInboundShipment(request);

//		UpdateInboundShipmentResponse response = new UpdateInboundShipmentResponse();
		UpdateInboundShipmentResult result = new UpdateInboundShipmentResult();


		result.setShipmentId(request.getShipmentId());
		response.setUpdateInboundShipmentResult(result);
		try {
			String data = mapper.writeValueAsString(response.getUpdateInboundShipmentResult());
			LOGGER.info("修改补货订单-亚马逊返回："+data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
}
