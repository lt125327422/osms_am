package com.itecheasy.core.amazon;

import com.amazon.client.AmazonReportClient;
import com.amazonaws.mws.MarketplaceWebServiceException;
import com.itecheasy.core.amazon.getReportResult.AmazonManagerStockResultVO;
import com.itecheasy.core.amazon.getReportResult.GetReportListResultVO;
import com.itecheasy.core.amazon.getReportvo.GetReportListVO;
import com.itecheasy.core.amazon.getReportResult.GetReportRequestListResultVO;
import com.itecheasy.core.amazon.getReportResult.RequestReportResultVO;
import com.itecheasy.core.amazon.getReportvo.GetReportRequestListVO;
import com.itecheasy.core.amazon.getReportvo.RequestReportVO;

import java.util.*;

/**
 * @Auther: liteng
 * @Date: 2018/7/2 11:17
 * @Description:
 */
public class AmazonReportWebServiceImpl implements AmazonReportWebService {


    @Override
    public AmazonManagerStockResultVO getReport(RequestReportVO step1VO,AmazonConfigInfo api) throws MarketplaceWebServiceException {
        try {
            //step first   返回一个ReportRequestId
            RequestReportResultVO step1Result = AmazonReportClient.requestReport(step1VO,api);

            List<String> ids = new ArrayList<String>();
            ids.add(step1Result.getReportRequestId());  //一个枚举对应一个id

            //step 2
            GetReportRequestListVO step2VO = new GetReportRequestListVO();
            step2VO.setIds(ids);
            GetReportRequestListResultVO reportRequest = AmazonReportClient.getReportRequestList(step2VO,api);

            //直接生成报告
//        for (String generatedReportId : reportRequest.getGeneratedReportIdList()) {
//            String report = AmazonReportClient.getReport(generatedReportId, api);
//        }


            //收集step2.0
            List<GetReportRequestListResultVO> allStep2Result = new ArrayList<GetReportRequestListResultVO>();
            allStep2Result.add(reportRequest);

            //step 2.1   考虑到返回nextToken的情况
            boolean hasNext1 = reportRequest.isHasNext();
            String token1 =reportRequest.getNextToken();
            while (hasNext1){
                GetReportRequestListResultVO step2_1Result = AmazonReportClient.getReportRequestListByNextToken(token1,api);
                token1 = step2_1Result.getNextToken();
                hasNext1 = step2_1Result.isHasNext();

                allStep2Result.add(step2_1Result); //收集step3next
            }

            List<String> step3IdList = new ArrayList<String>();
            for (GetReportRequestListResultVO step2Result : allStep2Result) {
                step3IdList.addAll(step2Result.getReportRequestIdList());
            }

            //step 3   调用这个api是因为有些订单没有GeneratedReportId
            //集合所有第二部的参数
            List<String> step3Param = new ArrayList<String>(step3IdList);
            GetReportListVO vo = new GetReportListVO();  //封装给step3调用
            vo.setReportRequestIdList(step3Param);

            GetReportListResultVO step3Result = AmazonReportClient.getReportList(vo,api);//调用amazon step3

            //收集step3
            List<String> allstep3_result = new ArrayList<String>(step3Result.getReportIdList());

            //step 3.1   考虑到返回nextToken的情况
            boolean hasNext = step3Result.isHasNext();
            String token =step3Result.getNextToken();
            while (hasNext){
                GetReportListResultVO step3_1Result = AmazonReportClient.getReportListByNextToken(token,api);
                token = step3_1Result.getNextToken();
                hasNext = step3_1Result.isHasNext();
                //收集step3next
                allstep3_result.addAll(step3_1Result.getReportIdList());
            }

            //生成报告
            //step 2 和2.1的GeneratedReportId当为参数，或者step 3中生成的ReportId作为参数   最后要多次调用report
            //step 4   如果有GeneratedReportId就可以直接生成报告了
            List<String> lastReportList = new ArrayList<String>();
            for (String lastParam : allstep3_result) {
                lastReportList.add(AmazonReportClient.getReport(lastParam,api));
                //md5校验，如果一直失败就发邮件
            }


            //解析报告
//        List<Map<String,Object>> whatColumn = new ArrayList<Map<String, Object>>();
//        Map<String,Object> rowMap = new HashMap<String, Object>();
//        Map<String,List<Object>> allRow = new HashMap<String, List<Object>>();


            for (String report : lastReportList) {
                //所有的报告
                String[] splitRows = null;
                splitRows = report.split("\r\n");  //根据换行符来分割，得到每行的数据

                    for (int i = 0; i < splitRows.length; i++) { //从第二行开始解析，第二行开始才是数据
                        if (i==0){  //第一行
                            String[] splitSingle = splitRows[i].split("\t"); //取得每一行的每一个
                            List<String> firstRowList = Arrays.asList(splitSingle);
                        }else{
                            String[] splitSingle = splitRows[i].split("\t"); //取得每一行的每一个

                        }
                        //剩下的行的数据
                        //把这一行的全部放入到List中
                    }
                        //没有报告或者报告是只有表头，这样的报告没有意义

            }
        }catch (MarketplaceWebServiceException e) {
            e.printStackTrace();
        }catch (RuntimeException ex){
            ex.printStackTrace();
        }

        return null;
    }



}
